<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2020-03-20 13:07:11">
<x_297044_code_rvw_rules action="INSERT_OR_UPDATE">
<active>true</active>
<advanced>false</advanced>
<advanced_condition/>
<applicable_to>sys_update_xml</applicable_to>
<condition table="sys_update_xml">typeLIKEBusiness Rule^payloadLIKE&lt;when&gt;before&lt;/when&gt;^payloadLIKEcurrent.update()^EQ<item goto="false" or="false" field="type" endquery="false" value="Business Rule" operator="LIKE" newquery="false"/>
<item goto="false" or="false" field="payload" endquery="false" value="&lt;when&gt;before&lt;/when&gt;" operator="LIKE" newquery="false"/>
<item goto="false" or="false" field="payload" endquery="false" value="current.update()" operator="LIKE" newquery="false"/>
<item goto="false" or="false" field="" endquery="true" value="" operator="=" newquery="false"/>
</condition>
<description>Preventing the insertion of current.insert() in Business Rules</description>
<level>1</level>
<name>Business rule current.insert</name>
<resolution>In the before business rule you should not be using update() method on the current object, because the state of this object can be modified before being saved. In an after/async/delete business rules you should not be using current.update(), as this will trigger another set of business rules on this table. If possible consider moving the functionality that needs to alter the current record to a before business rule.</resolution>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-03-17 13:01:35</sys_created_on>
<sys_id>088da9ee07e384102c6ef4218c1ed050</sys_id>
<sys_mod_count>5</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-03-20 09:00:32</sys_updated_on>
</x_297044_code_rvw_rules>
<x_297044_code_rvw_rules action="INSERT_OR_UPDATE">
<active>true</active>
<advanced>true</advanced>
<advanced_condition><![CDATA[(function() {
	var regex = /<script>[.|\s|\S]*([a-f]|[A-F]|[0-9]){32}[.|\s|\S]*<\/script>/; // This regex will find any 32 character long string of hexadecimal number between the <script></script> blocks of the payload
    if (current.getValue('payload').toString().match(regex)) {
        return true;
    } else {
        return false;
    }
})();]]></advanced_condition>
<applicable_to>sys_update_xml</applicable_to>
<condition table="sys_update_xml"/>
<description/>
<level>2</level>
<name>Payload contains sys_ids</name>
<resolution/>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-03-17 15:27:39</sys_created_on>
<sys_id>f4ee4a6a076784102c6ef4218c1ed090</sys_id>
<sys_mod_count>26</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-03-18 13:41:40</sys_updated_on>
</x_297044_code_rvw_rules>
<x_297044_code_rvw_rules action="INSERT_OR_UPDATE">
<active>true</active>
<advanced>false</advanced>
<advanced_condition/>
<applicable_to>sys_update_xml</applicable_to>
<condition table="sys_update_xml">payloadLIKEShnek^ORpayloadLIKEshnek^EQ<item goto="false" or="false" field="payload" endquery="false" value="Shnek" operator="LIKE" newquery="false"/>
<item goto="false" or="true" field="payload" endquery="false" value="shnek" operator="LIKE" newquery="false"/>
<item goto="false" or="false" field="" endquery="true" value="" operator="=" newquery="false"/>
</condition>
<description>Findings code which has "Shnek" in them, as I usually use this for debugging purposes only and should be removed from the code by the time the update set is sent to production.</description>
<level>3</level>
<name>Look for "Shnek" debug keyword</name>
<resolution/>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-03-17 15:26:42</sys_created_on>
<sys_id>488e0a6a076784102c6ef4218c1ed027</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-03-17 15:26:42</sys_updated_on>
</x_297044_code_rvw_rules>
<x_297044_code_rvw_rules action="INSERT_OR_UPDATE">
<active>true</active>
<advanced>false</advanced>
<advanced_condition/>
<applicable_to>sys_update_set</applicable_to>
<condition table="sys_update_set">base_update_setISEMPTY^EQ<item goto="false" or="false" field="base_update_set" endquery="false" value="" operator="ISEMPTY" newquery="false"/>
<item goto="false" or="false" field="" endquery="true" value="" operator="=" newquery="false"/>
</condition>
<description>For tracking update sets that are NOT under any batch</description>
<level>4</level>
<name>Find update sets without Batch</name>
<resolution/>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-03-17 15:25:13</sys_created_on>
<sys_id>f03e4e6a076784102c6ef4218c1ed040</sys_id>
<sys_mod_count>2</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-03-20 09:52:52</sys_updated_on>
</x_297044_code_rvw_rules>
<x_297044_code_rvw_rules action="INSERT_OR_UPDATE">
<active>true</active>
<advanced>false</advanced>
<advanced_condition/>
<applicable_to>sys_update_xml</applicable_to>
<condition table="sys_update_xml">payloadLIKEgs.info^ORpayloadLIKEgs.error^ORpayloadLIKEgs.warn^EQ<item goto="false" or="false" field="payload" endquery="false" value="gs.info" operator="LIKE" newquery="false"/>
<item goto="false" or="true" field="payload" endquery="false" value="gs.error" operator="LIKE" newquery="false"/>
<item goto="false" or="true" field="payload" endquery="false" value="gs.warn" operator="LIKE" newquery="false"/>
<item goto="false" or="false" field="" endquery="true" value="" operator="=" newquery="false"/>
</condition>
<description>Looking for any logging statements</description>
<level>5</level>
<name>Logging statements</name>
<resolution/>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-03-17 14:59:04</sys_created_on>
<sys_id>6c480666076784102c6ef4218c1ed038</sys_id>
<sys_mod_count>1</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-03-17 15:25:35</sys_updated_on>
</x_297044_code_rvw_rules>
</unload>
